"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
# import os    # here we're now not going to use OS module to acess file through os system path pheripery 
#because it's not recommanded when we're going to deploy production-ready web-app

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-rhx5h83xw_o4lwmxjugop#@_9@cogvdb^9^rg^2(2$drph($+u'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
#as in production-ready environment we don't want to run the security warning ; so we flagged it false 

ALLOWED_HOSTS = ["localhost", "127.0.0.1"] # this specify that allowed user is local host or local-ip only  


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'posts',  # here we register out 'posts' app here in setting.py by adding it to the installed app list
    'users' # here we register out 'users' app here in setting.py by adding it to the installed app list
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# again to making it production ready to deploy we have to make changes in specifying convention of the files path 
STATIC_URL = 'static/'
#here we're going to add MEDIA_URL just like what we did in the case of STATIC_URL
MEDIA_URL = 'media/' # going to mention folder name where its going to saved media files i.e. images and videos etc
#now make static _root file where our assets like admin info. configuration info, layout , meta data will be saved
STATIC_ROOT = BASE_DIR / 'assets' # while running this command :>py manage.py  collectstatic ; automatically asset folder will be previewed within upper myproject folder , containing files like admin , css[in admin its contains icon svgs related to search , tooltag , alert, submit etc] . js which was common to many pages 

#now just like we specify the path to static folder ; here we have to do the same in case of media folder
#MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # we will not create a media directory/folder here on upper-myproject like we did in the case of static folder 
 #this media folder will create byitself once users uploading images to the site  
# the above method of specifying path to media media folder is not recommended for production ready application instead we do that just like we did of STATIC_ROOT
MEDIA_ROOT= BASE_DIR / 'media' 
#STATICFILES_DIRS = [
#    os.path.join(BASE_DIR, 'static')    
# ]   # here we're giving the 'static' folder's (which's reside on the base directory 'myproject') adress which's consisting of a css files  
# similarly above specifying convention for the path of static files not recomended for production-ready project or app instead we specifying like this:
STATICFILES_DIRS = [
    BASE_DIR / 'static'
] 


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
